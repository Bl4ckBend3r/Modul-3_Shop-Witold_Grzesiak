generator client {
  provider = "prisma-client-js"
//  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===== ENUMS =====
 */
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

/**
 * ===== MODELS =====
 */
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  firstName    String
  lastName     String?
  passwordHash String
  phone        String? @db.VarChar(32)

  addresses Address[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  line1     String
  line2     String?
  city      String
  postal    String
  country   String
  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Brand {
  id       String  @id @default(cuid())
  name     String
  slug     String  @unique
  imageUrl String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  image       String?
  exploreInfo String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Product {
  id          String  @id @default(cuid())
  sku         String  @unique // używane w seedzie
  name        String
  slug        String  @unique
  description String?
  price       Decimal @db.Decimal(10, 2)
  stock       Int
  imageUrl    String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  brandId String?
  brand   Brand?  @relation(fields: [brandId], references: [id], onDelete: SetNull)

  images     ProductImage[]
  orderItems OrderItem[]

  soldCount   Int   @default(0)
  ratingAvg   Float @default(0)
  ratingCount Int   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([categoryId])
  @@index([brandId])
  @@index([price])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  alt       String?
  position  Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@map("ProductImage") // użyj, jeśli chcesz wymusić nazwę tabeli

  @@index([productId])
}

model Order {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)

  // snapshot adresu przy zamówieniu
  shipName    String?
  shipLine1   String?
  shipLine2   String?
  shipCity    String?
  shipPostal  String?
  shipCountry String?

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  quantity        Int
  priceAtPurchase Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}
